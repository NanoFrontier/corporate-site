---
interface Props {
  title: string;
  description: string;
  driveUrl: string;
  className?: string;
}

const { title, description, driveUrl, className = "" } = Astro.props;
---

<div class={`pdf-viewer bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden mt-12 mb-12 ${className}`}>
  <!-- Header -->
  <div class="bg-gradient-to-r from-[#04666c] to-[#035458] text-white p-4 sm:p-6">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
      <div class="flex items-center space-x-3 sm:space-x-4 min-w-0">
        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <div class="min-w-0 flex-1">
          <h3 class="text-lg sm:text-xl font-bold truncate">{title}</h3>
          <p class="text-white/80 text-sm truncate">{description}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- PDF Viewer Container -->
  <div class="relative bg-gray-50" id="pdf-container">
    <!-- PDF Canvas Container -->
    <div class="relative bg-white flex items-center justify-center min-h-[600px]" id="pdf-viewer">
      <div class="absolute inset-0 flex flex-col items-center justify-center text-center text-gray-500" id="loading">
        <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-[#04666c] mb-6"></div>
        <p class="text-lg font-medium">PDFを読み込み中...</p>
        <p class="text-sm text-gray-400 mt-2">しばらくお待ちください</p>
      </div>
      
      <div class="hidden" id="canvas-container">
        <canvas id="pdf-canvas" class="max-w-full max-h-full shadow-lg"></canvas>
        
        <!-- Navigation Zones -->
        <div class="absolute inset-0 pointer-events-none">
          <div class="absolute left-0 top-0 bottom-0 w-1/3 cursor-pointer hover:bg-black/5 transition-colors" id="prev-zone" title="前のページ"></div>
          <div class="absolute right-0 top-0 bottom-0 w-1/3 cursor-pointer hover:bg-black/5 transition-colors" id="next-zone" title="次のページ"></div>
        </div>
      </div>
    </div>
    
    <!-- Progress Bar -->
    <div class="h-1 bg-gray-200">
      <div class="h-full bg-[#04666c] transition-all duration-300" id="progress-bar" style="width: 0%"></div>
    </div>
  </div>
  
  <!-- Page Navigation Section (Centered) -->
  <div class="flex items-center justify-center space-x-3 sm:space-x-4 p-4 bg-white border-t border-gray-200">
    <button 
      class="p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      id="prev-page"
      disabled
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    
    <div class="flex items-center space-x-2">
      <span class="text-sm text-gray-600">ページ:</span>
      <span class="text-sm font-medium" id="current-page">1</span>
      <span class="text-sm text-gray-400">/</span>
      <span class="text-sm text-gray-600" id="total-pages">-</span>
    </div>
    
    <button 
      class="p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      id="next-page"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>
</div>

<script>
  // PDF.jsの型定義
  declare global {
    interface Window {
      pdfjsLib: any;
    }
  }

  class PDFViewer {
    private container: HTMLElement;
    private currentPage: number;
    private totalPages: number;
    private pdfDoc: any;
    private touchStartX: number | null;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.currentPage = 1;
      this.totalPages = 0;
      this.pdfDoc = null;
      this.touchStartX = null;
      
      this.init();
    }
    
    async init() {
      if (typeof window.pdfjsLib === 'undefined') {
        await this.loadPDFJS();
      }
      
      this.bindEvents();
      await this.loadPDF();
    }
    
    async loadPDFJS() {
      const cdnUrls = [
        'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.min.js',
        'https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.min.js',
        'https://cdnjs.cloudflare.com/ajax/libs/pdfjs-dist/3.11.174/build/pdf.min.js'
      ];
      
      for (let i = 0; i < cdnUrls.length; i++) {
        try {
          console.log(`Trying CDN ${i + 1}: ${cdnUrls[i]}`);
          await this.loadScript(cdnUrls[i]);
          console.log(`PDF.js loaded successfully from CDN ${i + 1}`);
          
          // Workerの設定
          const workerSrc = cdnUrls[i].replace('pdf.min.js', 'pdf.worker.min.js');
          window.pdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;
          console.log('Worker configured:', workerSrc);
          
          return;
        } catch (error) {
          console.warn(`CDN ${i + 1} failed:`, error);
          if (i === cdnUrls.length - 1) {
            throw new Error('All CDNs failed');
          }
        }
      }
    }
    
    loadScript(src: string) {
      return new Promise<void>((resolve, reject) => {
        const script = document.createElement('script');
        script.src = src;
        
        script.onload = () => {
          console.log(`Script loaded successfully: ${src}`);
          resolve();
        };
        
        script.onerror = (error) => {
          console.error(`Script failed to load: ${src}`, error);
          reject(new Error(`Failed to load: ${src}`));
        };
        
        document.head.appendChild(script);
      });
    }
    
    private async loadPDF() {
      try {
        // 直接PDFファイルを読み込み（GitHub Pagesで動作）
        const response = await fetch('/pdfs/NanoFrontier_Business_Overview_Simple.pdf');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        
        // PDF.jsでPDFを読み込み
        const loadingTask = window.pdfjsLib.getDocument({ data: uint8Array });
        this.pdfDoc = await loadingTask.promise;
        this.totalPages = this.pdfDoc.numPages;
        
        // 初期ページを表示
        this.currentPage = 1;
        this.renderPage();
        this.updatePageInfo();
        this.updateNavigation();
        
        // ローディング状態を更新
        this.hideLoading();
        
      } catch (error) {
        console.error('PDF読み込みエラー:', error);
        // エラーが発生しても何も表示しない（ダイアログなし）
        this.hideLoading();
      }
    }

    private hideLoading() {
      const loading = this.container.querySelector('#loading');
      const canvasContainer = this.container.querySelector('#canvas-container');
      if (loading) loading.classList.add('hidden');
      if (canvasContainer) canvasContainer.classList.remove('hidden');
    }

    private renderPage() {
      if (!this.pdfDoc) return;
      
      const canvas = this.container.querySelector('#pdf-canvas') as HTMLCanvasElement;
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      this.pdfDoc.getPage(this.currentPage).then((page: any) => {
        const viewport = page.getViewport({ scale: 1.0 });
        
        // キャンバスのサイズを設定
        if (canvas) {
          canvas.width = viewport.width;
          canvas.height = viewport.height;
        }
        
        // スケールを計算（コンテナに合わせて最適化）
        const containerWidth = this.container.clientWidth - 40;
        const containerHeight = this.container.clientHeight - 40;
        
        const scaleX = containerWidth / viewport.width;
        const scaleY = containerHeight / viewport.height;
        const scale = Math.min(scaleX, scaleY, 1.0);
        
        const scaledViewport = page.getViewport({ scale });
        
        // キャンバスサイズを再設定
        if (canvas) {
          canvas.width = scaledViewport.width;
          canvas.height = scaledViewport.height;
        }
        
        // ページをレンダリング
        const renderContext = {
          canvasContext: ctx,
          viewport: scaledViewport
        };
        
        page.render(renderContext);
        
        // ページ情報を更新
        this.updatePageInfo();
        this.updateProgress();
      });
    }

    private updatePageInfo() {
      if (!this.pdfDoc) return;
      
      const currentPageEl = this.container.querySelector('#current-page');
      const totalPagesEl = this.container.querySelector('#total-pages');
      
      if (currentPageEl) currentPageEl.textContent = this.currentPage.toString();
      if (totalPagesEl) totalPagesEl.textContent = this.totalPages.toString();
    }

    private updateNavigation() {
      const prevBtn = this.container.querySelector('#prev-page') as HTMLButtonElement;
      const nextBtn = this.container.querySelector('#next-page') as HTMLButtonElement;
      
      if (prevBtn) prevBtn.disabled = this.currentPage <= 1;
      if (nextBtn) nextBtn.disabled = this.currentPage >= this.totalPages;
    }

    private updateProgress() {
      if (!this.totalPages) return;
      
      const progress = ((this.currentPage - 1) / (this.totalPages - 1)) * 100;
      const progressBar = this.container.querySelector('#progress-bar') as HTMLElement;
      if (progressBar) progressBar.style.width = `${progress}%`;
    }

    private goToPage(pageNumber: number) {
      if (!this.pdfDoc || pageNumber < 1 || pageNumber > this.pdfDoc.numPages) return;
      
      this.currentPage = pageNumber;
      this.renderPage();
      this.updateNavigation();
    }

    private nextPage() {
      if (this.pdfDoc && this.currentPage < this.pdfDoc.numPages) {
        this.goToPage(this.currentPage + 1);
      }
    }

    private prevPage() {
      if (this.currentPage > 1) {
        this.goToPage(this.currentPage - 1);
      }
    }

    private bindEvents() {
      const prevBtn = this.container.querySelector('#prev-page');
      const nextBtn = this.container.querySelector('#next-page');
      const prevZone = this.container.querySelector('#prev-zone');
      const nextZone = this.container.querySelector('#next-zone');
      
      prevBtn?.addEventListener('click', () => this.prevPage());
      nextBtn?.addEventListener('click', () => this.nextPage());
      prevZone?.addEventListener('click', () => this.prevPage());
      nextZone?.addEventListener('click', () => this.nextPage());
      
      // Keyboard navigation
      document.addEventListener('keydown', this.handleKeyDown);
      
      // Touch events
      const canvas = this.container.querySelector('#pdf-canvas');
      if (canvas) {
        canvas.addEventListener('touchstart', this.handleTouchStart as EventListener);
        canvas.addEventListener('touchend', this.handleTouchEnd as EventListener);
      }
    }

    private handleKeyDown = (e: KeyboardEvent) => {
      if (this.container.contains(document.activeElement)) {
        if (e.key === 'ArrowLeft') {
          this.prevPage();
        } else if (e.key === 'ArrowRight') {
          this.nextPage();
        }
      }
    };

    private handleTouchStart = (e: TouchEvent) => {
      this.touchStartX = e.touches[0].clientX;
    };

    private handleTouchEnd = (e: TouchEvent) => {
      if (!this.touchStartX) return;
      
      const touchEndX = e.changedTouches[0].clientX;
      const diffX = this.touchStartX - touchEndX;
      
      if (Math.abs(diffX) > 50) {
        if (diffX > 0) {
          this.nextPage();
        } else {
          this.prevPage();
        }
      }
      
      this.touchStartX = null;
    };

    public destroy() {
      document.removeEventListener('keydown', this.handleKeyDown);
      
      const canvas = this.container.querySelector('#pdf-canvas');
      if (canvas) {
        canvas.removeEventListener('touchstart', this.handleTouchStart);
        canvas.removeEventListener('touchend', this.handleTouchEnd);
      }
    }
  }
  
  // Initialize PDF viewers
  document.addEventListener('DOMContentLoaded', () => {
    const viewers = document.querySelectorAll('.pdf-viewer');
    viewers.forEach(viewer => {
      if (viewer instanceof HTMLElement) {
        new PDFViewer(viewer);
      }
    });
  });
</script>

<style>
  .pdf-viewer {
    transition: all 0.3s ease;
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
  }
  
  .pdf-viewer:hover {
    transform: translateY(-2px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  #pdf-container {
    transition: all 0.3s ease;
    width: 100%;
  }
  
  #pdf-viewer {
    width: 100%;
    min-height: 60vh;
    max-height: 75vh;
    padding: 0;
    margin: 0;
  }
  
  @media (max-width: 768px) {
    #pdf-viewer {
      min-height: 50vh;
      max-height: 70vh;
    }
  }
  
  @media (min-width: 1201px) {
    #pdf-viewer {
      min-height: 70vh;
      max-height: 80vh;
    }
  }
  
  #canvas-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    min-height: 350px;
    overflow: auto;
    padding: 1rem;
    margin: 0;
  }
  
  @media (max-width: 768px) {
    #canvas-container {
      overflow: auto;
      align-items: center;
      padding: 0.5rem;
      margin: 0;
    }
  }
  
  @media (min-width: 1201px) {
    #canvas-container {
      overflow: auto;
      align-items: center;
      padding: 2rem;
    }
  }
  
  #pdf-canvas {
    border-radius: 0;
    box-shadow: none;
    max-width: none;
    max-height: none;
    padding: 0;
    margin: 0;
  }
  
  @media (max-width: 1200px) {
    .pdf-viewer {
      max-width: 100%;
      margin: 0 1rem;
    }
    
    #pdf-viewer {
      min-height: 55vh;
    }
  }
  
  @media (max-width: 768px) {
    .pdf-viewer {
      margin: 0 1rem;
      border-radius: 8px;
    }
    
    #pdf-viewer {
      min-height: 35vh;
    }
    
    #canvas-container {
      min-height: 280px;
    }
  }
  
  @media (max-width: 480px) {
    .pdf-viewer {
      margin: 0 0.75rem;
    }
    
    #pdf-viewer {
      min-height: 25vh;
    }
    
    #canvas-container {
      min-height: 200px;
    }
  }
  
  @media (max-width: 360px) {
    .pdf-viewer {
      margin: 0 0.5rem;
    }
    
    #pdf-viewer {
      min-height: 20vh;
    }
    
    #canvas-container {
      min-height: 150px;
    }
  }
</style>
